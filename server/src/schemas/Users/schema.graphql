type User {
    id: ID!
    email: String!
    role: Role
    createdAt: String!
    updatedAt: String!
}

type Users {
    users: [User!]!
    totalCount: Int!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    email: String!
    password: String!
    role: Role
}

input UpdateUserInput {
    email: String
    role: Role
}

type SystemMessage {
    info: String
}

type Query {
    user(id: ID!): User!
    users(
        filter: String
        skip: Int
        first: Int
        orderBy: UserOrderByInput
    ): Users!
}

type Mutation {
    login(email: String!, password: String!): AuthPayload
    createUser(input: CreateUserInput!): AuthPayload
    updateUser(id: ID!, input: UpdateUserInput!): User
    deleteUser(id: ID!): SystemMessage
}

enum Role {
    USER
    ADMIN
}

enum UserOrderByInput {
    createdAt_ASC
    createdAt_DESC
}
