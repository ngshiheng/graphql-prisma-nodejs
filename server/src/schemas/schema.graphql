type User {
    id: ID!
    email: String!
    role: Role
    createdAt: String!
    updatedAt: String!
}

type AuthPayload {
    token: String!
    user: User!
}

type UserEdge {
    node: User!
    cursor: String!
}

type UserConnection {
    edges: [UserEdge]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type Query {
    user(id: ID!): User!
    users(
        filter: String
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
        orderBy: UserOrderByInput
    ): UserConnection!
}

input UserCreateInput {
    email: String!
    password: String!
    role: Role
}

input UserUpdateInput {
    email: String
    role: Role
}

type Mutation {
    login(email: String!, password: String!): AuthPayload!
    createUser(input: UserCreateInput!): AuthPayload!
    updateUser(id: ID!, input: UserUpdateInput!): User!
    deleteUser(id: ID!): User!
}

enum Role {
    USER
    ADMIN
}

enum UserOrderByInput {
    id_ASC
    id_DESC
    email_ASC
    email_DESC
    role_ASC
    role_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}
