type User {
    id: ID!
    name: String
    email: String!
    role: Role!
    posts: [Post!]!
    createdAt: String!
    updatedAt: String!
}

type AuthPayload {
    token: String!
    user: User!
}

type UserEdge {
    node: User!
    cursor: String!
}

type UserConnection {
    edges: [UserEdge]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

input UserCreateInput {
    email: String!
    password: String!
    name: String
    role: Role
}

input UserUpdateInput {
    name: String
    email: String
    role: Role
}

type Message {
    message: String!
}

enum Role {
    ADMIN
    USER
}

enum UserOrderByInput {
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    email_ASC
    email_DESC
    role_ASC
    role_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

type Post {
    id: ID!
    title: String!
    category: PostCategory!
    author: User!
    createdAt: String!
    updatedAt: String!
}

type PostConnection {
    edges: [PostEdge!]!
    pageInfo: PageInfo!
    totalCount: Float!
}

input PostCreateInput {
    title: String!
    category: PostCategory!
}

type PostEdge {
    node: Post!
    cursor: String!
}

input PostUpdateInput {
    title: String
    category: PostCategory
}

enum PostCategory {
    SPORT
    FINANCE
    TECHNOLOGY
    OTHER
}

type Query {
    post(id: ID!): Post!
    user(id: ID!): User!
    users(
        orderBy: UserOrderByInput
        last: Int
        first: Int
        before: String
        after: String
        skip: Int
        filter: String
    ): UserConnection!
}

type Mutation {
    login(email: String!, password: String!): AuthPayload!
    createUser(input: UserCreateInput!): AuthPayload!
    updateUser(id: ID!, input: UserUpdateInput!): User!
    deleteUser(id: ID!): User!
    resetPassword(email: String!): Message!
    updatePassword(password: String!): Message!
    createPost(input: PostCreateInput!): Post!
    updatePost(input: PostUpdateInput!, id: String!): Post!
    deletePost(id: ID!): Post!
}
